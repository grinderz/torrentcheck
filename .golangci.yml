# options for analysis running
run:

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 1m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # list of build tags, all linters use it. Default is empty list.
  # build-tags:
  #   - mytag

  # which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but default dirs are skipped independently
  # from this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work
  # on Windows.
  skip-dirs:
    - .idea
    - build

  # default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work
  # on Windows.
  # skip-files:
  #   - ".*\\.my\\.go$"
  #   - lib/bad.go

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  modules-download-mode: vendor

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: false


linters:
  # only enable the linters listed below
  disable-all: true
  enable:
    # make sure all errors returned by functions are handled
    - errcheck

    # find unused code
    - deadcode

    # show how code can be simplified
    - gosimple

    # # make sure code is formatted
    - gofmt

    # examine code and report suspicious constructs, such as Printf calls whose
    # arguments do not align with the format string
    - govet

    # make sure names and comments are used according to the conventions
    - revive

    # detect when assignments to existing variables are not used
    - ineffassign

    # run static analysis and find errors
    - staticcheck

    # find unused variables, functions, structs, types, etc.
    - unused

    # find unused struct fields
    - structcheck

    # find unused global variables
    - varcheck

    # parse and typecheck code
    - typecheck

issues:
  # don't use the default exclude rules, this hides (among others) ignored
  # errors from Close() calls
  exclude-use-default: false

  # list of things to not warn about
  exclude:
    # golint: do not warn about missing comments for exported stuff
    - exported (function|method|var|type|const) .* should have comment or be unexported
    # golint: ignore constants in all caps
    - don't use ALL_CAPS in Go names; use CamelCase
